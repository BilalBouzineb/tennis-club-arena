<?php

namespace Database\Factories;

use App\Models\Game;
use App\Models\Player;
use App\Models\Group;
use Illuminate\Database\Eloquent\Factories\Factory;

class GameFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = Game::class;

    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        // Ensure player1 and player2 are different
        $player1 = Player::factory()->create();
        $player2 = Player::factory()->create(['group_id' => $player1->group_id]); // Ensure they are in the same group for this basic factory.
        
        // Ensure player1_id and player2_id are different.
        // In a real scenario, you'd likely fetch existing players or ensure uniqueness more robustly.
        // For factory defaults, creating new distinct players is simplest.
        while ($player2->id === $player1->id) {
            $player2->delete(); // clean up the identical player
            $player2 = Player::factory()->create(['group_id' => $player1->group_id]);
        }


        $status = $this->faker->randomElement(['played', 'scheduled', 'cancelled']);
        $winnerId = null;
        $playedAt = null;

        if ($status === 'played') {
            $winnerId = $this->faker->randomElement([$player1->id, $player2->id]);
            $playedAt = $this->faker->dateTimeThisMonth();
        }

        return [
            'player1_id' => $player1->id,
            'player2_id' => $player2->id,
            'winner_id' => $winnerId,
            'group_id' => $player1->group_id, // Use the group_id from one of the players
            'played_at' => $playedAt,
            'scheduled_date' => $this->faker->dateTimeThisMonth(),
            'status' => $status,
        ];
    }

    /**
     * Indicate that the game has been played.
     *
     * @return \Illuminate\Database\Eloquent\Factories\Factory
     */
    public function played()
    {
        return $this->state(function (array $attributes) {
            // If player1_id and player2_id are already set (e.g. via create([...])), use them.
            // Otherwise, they will be generated by the definition() method.
            // This logic assumes attributes['player1_id'] and attributes['player2_id'] might not exist yet.
            // It's safer to resolve them after creation or pass them explicitly.
            // For simplicity, we'll assume they are resolved within definition or passed to state().
            
            $p1Id = $attributes['player1_id'] ?? Player::factory()->create()->id;
            $p2Id = $attributes['player2_id'] ?? Player::factory()->create()->id;
            
            // If using this state, ensure player1_id and player2_id are passed or generated correctly before this state is applied.
            // This factory state primarily sets winner_id and status for a "played" game.

            return [
                'status' => 'played',
                'played_at' => now(),
                // 'winner_id' => $this->faker->randomElement([$p1Id, $p2Id]), // This line causes issues if p1Id/p2Id are not resolved.
                                                                            // It's better to set winner_id explicitly when using this state.
            ];
        });
    }
     /**
     * Set player1 and player2 for the game.
     *
     * @param Player $player1
     * @param Player $player2
     * @return $this
     */
    public functionbetween(Player $player1, Player $player2)
    {
        return $this->state(fn (array $attributes) => [
            'player1_id' => $player1->id,
            'player2_id' => $player2->id,
            'group_id' => $player1->group_id, // Assume they are in the same group
        ]);
    }

    /**
     * Set the winner of the game.
     *
     * @param Player $winner
     * @return $this
     */
    public functionwinner(Player $winner)
    {
        return $this->state(fn (array $attributes) => [
            'winner_id' => $winner->id,
        ]);
    }
}
